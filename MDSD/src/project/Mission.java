// --------------------------------------------------------
// Code generated by Papyrus Java
// --------------------------------------------------------

package project;

import java.util.Arrays;

import project.Position;
import project.StrategyType;

/************************************************************/
/**
 * 
 */
class Mission {
	/**
	 * 
	 */
	public Mission(Rover r, Position[] positions) {
		this.setMission(positions);
		this.rover = r;
		nextPositionIndex = 0;
		nextPosition = missionPoints[nextPositionIndex];
	}

	private Position nextPosition;
	public StrategyType[] strategyType;
	private Strategy strategy = Strategy.getInstance();
	private Position[] missionPoints;
	private Position[] unvisitedPoints;
	private Rover rover;
	private int nextPositionIndex;
	private boolean missionStatus;

	/**
	 * 
	 * @param points 
	 */
	public void setMission(Position[] position) {
		missionPoints = position;
		unvisitedPoints = position;
	}

	/**
	 * 
	 */
	public void stopMission() {
	}
		
	public void updateRoverPosition(Position newPosition) {
		//System.out.println(rover.getPosition().toString());
		//System.out.println(newPosition.toString());
		//if(rover.isAtPosition(newPosition)) {
		if(rover.isAtPosition(newPosition) && !missionStatus) {
			if(unvisitedPoints.length == 0) {
				missionStatus = true;
			} else {
				nextPositionIndex++;
				nextPosition = strategy.calculateNextPoint(this, null, StrategyType.InMissionOrder,nextPositionIndex, newPosition);
				rover.moveToPoint(nextPosition);
				Position tempArray[] = new Position[0];
				if(unvisitedPoints.length-1>0) {
					tempArray = new Position[unvisitedPoints.length-1];
				}
				
				//Should probably be changed to some utility package or moved to some 
				//helper class we make code in as we need it. Basically just ArrayUtils.RemoveElement
				int y = 0;
				for(int x = 0; x < unvisitedPoints.length; x++) {
					if(unvisitedPoints[x].equals(nextPosition)) {
						x++;
					}
					if(y < unvisitedPoints.length-1) {
						tempArray[y] = unvisitedPoints[x];
					}
					y++;
				}
				unvisitedPoints = tempArray;
			}
		}
	}
	
	public Position getNextPosition() {
		return nextPosition;
	}
	public Position[] getMissionPoints() {
		return missionPoints;
	}
	public Position[] getUnvisitedPoints() {
		return unvisitedPoints;
	}
	
	public boolean getMissionStatus() {
		return missionStatus;
	}
};
