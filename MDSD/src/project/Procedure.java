// --------------------------------------------------------
// Code generated by Papyrus Java
// --------------------------------------------------------

package project;

import java.util.Set;

import area.Area;
import area.LogicalArea;
import area.PhysicalArea;
import project.ProcedureType;

/************************************************************/
/**
 * 
 */
public class Procedure extends Thread {
	/**
	 * 
	 */
	private Set<Rover> rovers;
	private ProcedureType type = ProcedureType.procedureA;
	
	public Procedure(Set<Rover> rovers) {
		this.rovers = rovers;
	}
	
	@Override
	public void start() {
		calculateRewards();
	}

	/**
	 *  
	 */
	public void calculateRewards() {
		
		try {
			this.sleep(20000);
		} catch (InterruptedException e) {
			// TODO Auto-generated catch block
			e.printStackTrace();
		}
		
		boolean changeProcedure = false;
		
		
			for(Rover rover : rovers) {
				Environment rovEnvironment = rover.getEnvironment();
				for(Area a: rovEnvironment.getAreas()) {
					if(type == ProcedureType.procedureA) {
						if(a.getClass().equals(PhysicalArea.class)) {
							rover.addRewardPoints(1);
						} else if(a.getClass().equals(LogicalArea.class)) {
							changeProcedure = true;
						}
					}
					else if(type == ProcedureType.procedureB) {
						if(a.getClass().equals(PhysicalArea.class)) {
							changeProcedure = true;
						} else if(a.getClass().equals(LogicalArea.class)) {
							rover.addRewardPoints(1);
						}
					}
				}
			}
		
		if(changeProcedure && type == ProcedureType.procedureA) {
			type = ProcedureType.procedureB;
		} else if(changeProcedure && type == ProcedureType.procedureB) {
			type = ProcedureType.procedureA;
		}
		changeProcedure=false;
		calculateRewards();
	}
};
